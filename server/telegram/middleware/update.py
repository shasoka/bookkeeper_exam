import asyncio
import random
from typing import Callable, Any, Awaitable

from aiogram import BaseMiddleware, html
from aiogram.types import TelegramObject

from resources.strings import SUCCESS_EFFECT_IDS
from services.service import get_user, changelog_seen


class ChangeLogMiddleware(BaseMiddleware):
    # noinspection PyTypeChecker
    async def __call__(
        self,
        handler: Callable[[TelegramObject, dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: dict[str, Any],
    ) -> Any:

        if event.from_user:
            user = await get_user(str(event.from_user.id))
            print('123')
            if not user.checked_update:
                await event.answer(
                    f"""
                    {html.code('[UPDATE CHANGELOG 17.06.2024]')}
                    \n\n–Ø —Å—Ö–æ–¥–∏–ª –∫ –≥—Ä—É–º–µ—Ä—É, —Ç–µ–ø–µ—Ä—å —É–º–µ—é –¥–∞–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã! üåÄ
                    \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ {html.code('–ö–û–õ-–í–û –í–û–ü–†–û–°–û–í / 10')} –∏ –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –¥–æ {html.code('–±–æ–ª—å—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ')} üßÆ
                    \n\n–ê –µ—â–µ —è –Ω–∞—É—á–∏–ª—Å—è –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤—ã–±—Ä–∞–ª. –î—É–º–∞—é, —Ç–∞–∫ —Å—Ç–∞–Ω–µ—Ç —á—É—Ç–æ—á–∫—É –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ ü´Ç
                    \n\n–í–æ –º–Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –º–Ω–æ–≥–æ –º–∏–Ω–æ—Ä–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤—Ä—è–¥ –ª–∏ –∑–∞–º–µ—Ç–∏—à—å... –ü—Ä–æ—Å—Ç–æ —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º–æ–π —Ö–æ–∑—è–∏–Ω —Å—Ç–∞—Ä–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –∏–∑ –º–µ–Ω—è –∫–æ–Ω—Ñ–µ—Ç—É üç¨
                    \n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–µ—Ç—Å—è, –ø–∏—à–∏ @shasoka
                    \n–ú–æ–∂–µ—à—å —Å–ø–æ–∫–æ–π–Ω–æ —É–¥–∞–ª—è—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ü´•
                    \n–£—Å–ø–µ—Ö–æ–≤! ü§û
                    """,
                    disable_notification=False,
                    message_effect_id=random.choice(SUCCESS_EFFECT_IDS)
                )
                await changelog_seen(str(event.from_user.id))
        return await handler(event, data)
